size_alloc = <%= sizeAlloc %>
cells = <%= cellsX %>

data = sint.Array(size_alloc)  # add dynamic memory

def output_random_triples(cond):
  # naming as in Damgard et al
  y, r, w = sint.get_random_triple()
  v, un1, un2 = sint.get_random_triple()
  u = v * r
  outp = [y, r, w, v, u]
  output_shares(2,*outp)
  data[cond] = y
  return cond + 1

open_channel(0)
open_channel(1)

n = regint.public_input(1)
print_ln("Dataset size %s", n)

open_channel(2)

while_loop(output_random_triples, lambda x: x < n, 0)

open_channel(3) # construct triples
open_channel(4) # get data

def import_data(cond):
  # naming as in Damgard et al
  y = cint.public_input(1000)
  data[cond] = y + data[cond]
  return cond + 1

while_loop(import_data, lambda x: x < n, 0)

close_channel(4)
close_channel(3)
close_channel(2)
close_channel(1)
close_channel(0)

# --------------------------------------------------------------------------------------
# ======================================================================================
# --------------------------------------------------------------------------------------

print_ln("COMPUTATION STARTED")

histogram = sint.Array(cells)

@for_range(n)
def range_body(i):
  @for_range(cells)
  def range_body2(j):
    histogram[j] = histogram[j] + (data[i] == j)

print_ln("# OUTPUT START:")

@for_range(len(histogram))
def range_body(i):
  print_ln("%s, %s", i, histogram[i].reveal())

print_ln("$ OUTPUT END")
