size_alloc = <%= sizeAlloc %>
cells_x = <%= cellsX %>
cells_y = <%= cellsY %>
data = sint.Array(size_alloc)  # add dynamic memory

def output_random_triples(cond):
  # naming as in Damgard et al
  y, r, w = sint.get_random_triple()
  v, un1, un2 = sint.get_random_triple()
  u = v * r
  outp = [y, r, w, v, u]
  output_shares(2,*outp)
  data[cond] = y
  return cond + 1

open_channel(0)
open_channel(1)

n = regint.public_input(1)
print_ln("Dataset size %s", n)

open_channel(2)

while_loop(output_random_triples, lambda x: x < n, 0)

open_channel(3) # construct triples
open_channel(4) # get data

masked_data = sint.Array(size_alloc) #add dynamic memory

def import_data(cond):
  # naming as in Damgard et al
  y = cint.public_input(1000)
  data[cond] = y + data[cond]
  return cond + 1

while_loop(import_data, lambda x: x < n, 0)

close_channel(4)
close_channel(3)
close_channel(2)
close_channel(1)
close_channel(0)

# --------------------------------------------------------------------------------------
# ======================================================================================
# --------------------------------------------------------------------------------------

histogram = sint.Matrix(cells_x,cells_y)

@for_range(n / 2)
def range_body(i):
  @for_range(cells_x)
  def range_body2(j):
    @for_range(cells_y)
    def range_body3(k):
      histogram[j][k] = histogram[j][k] + (data[2 * i] == j) * (data[2 * i + 1] == k)

sum = sint(0)
sum_addr = program.malloc(1, 's')
sum.store_in_mem(sum_addr)

open_channel(500)

@for_range(cells_x)
def range_body(i):
  @for_range(cells_y)
  def range_body2(j):
    regint.public_output(i)
    regint.public_output(j)
    cint.public_output(histogram[i][j].reveal())

close_channel(500)
